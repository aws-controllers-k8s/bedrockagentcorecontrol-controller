// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package agent_runtime

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.AgentRuntimeArtifact, b.ko.Spec.AgentRuntimeArtifact) {
		delta.Add("Spec.AgentRuntimeArtifact", a.ko.Spec.AgentRuntimeArtifact, b.ko.Spec.AgentRuntimeArtifact)
	} else if a.ko.Spec.AgentRuntimeArtifact != nil && b.ko.Spec.AgentRuntimeArtifact != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration, b.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration) {
			delta.Add("Spec.AgentRuntimeArtifact.ContainerConfiguration", a.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration, b.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration)
		} else if a.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration != nil && b.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration != nil {
			if ackcompare.HasNilDifference(a.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI, b.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI) {
				delta.Add("Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI", a.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI, b.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI)
			} else if a.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI != nil && b.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI != nil {
				if *a.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI != *b.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI {
					delta.Add("Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI", a.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI, b.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AgentRuntimeName, b.ko.Spec.AgentRuntimeName) {
		delta.Add("Spec.AgentRuntimeName", a.ko.Spec.AgentRuntimeName, b.ko.Spec.AgentRuntimeName)
	} else if a.ko.Spec.AgentRuntimeName != nil && b.ko.Spec.AgentRuntimeName != nil {
		if *a.ko.Spec.AgentRuntimeName != *b.ko.Spec.AgentRuntimeName {
			delta.Add("Spec.AgentRuntimeName", a.ko.Spec.AgentRuntimeName, b.ko.Spec.AgentRuntimeName)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AuthorizerConfiguration, b.ko.Spec.AuthorizerConfiguration) {
		delta.Add("Spec.AuthorizerConfiguration", a.ko.Spec.AuthorizerConfiguration, b.ko.Spec.AuthorizerConfiguration)
	} else if a.ko.Spec.AuthorizerConfiguration != nil && b.ko.Spec.AuthorizerConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer) {
			delta.Add("Spec.AuthorizerConfiguration.CustomJWTAuthorizer", a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer)
		} else if a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer != nil && b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer != nil {
			if len(a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience) != len(b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience) {
				delta.Add("Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience", a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience)
			} else if len(a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience) {
					delta.Add("Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience", a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience)
				}
			}
			if len(a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients) != len(b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients) {
				delta.Add("Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients", a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients)
			} else if len(a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients) {
					delta.Add("Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients", a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients)
				}
			}
			if ackcompare.HasNilDifference(a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL) {
				delta.Add("Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL", a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL)
			} else if a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL != nil && b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL != nil {
				if *a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL != *b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL {
					delta.Add("Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL", a.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL, b.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Description, b.ko.Spec.Description) {
		delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
	} else if a.ko.Spec.Description != nil && b.ko.Spec.Description != nil {
		if *a.ko.Spec.Description != *b.ko.Spec.Description {
			delta.Add("Spec.Description", a.ko.Spec.Description, b.ko.Spec.Description)
		}
	}
	if len(a.ko.Spec.EnvironmentVariables) != len(b.ko.Spec.EnvironmentVariables) {
		delta.Add("Spec.EnvironmentVariables", a.ko.Spec.EnvironmentVariables, b.ko.Spec.EnvironmentVariables)
	} else if len(a.ko.Spec.EnvironmentVariables) > 0 {
		if !ackcompare.MapStringStringPEqual(a.ko.Spec.EnvironmentVariables, b.ko.Spec.EnvironmentVariables) {
			delta.Add("Spec.EnvironmentVariables", a.ko.Spec.EnvironmentVariables, b.ko.Spec.EnvironmentVariables)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.NetworkConfiguration, b.ko.Spec.NetworkConfiguration) {
		delta.Add("Spec.NetworkConfiguration", a.ko.Spec.NetworkConfiguration, b.ko.Spec.NetworkConfiguration)
	} else if a.ko.Spec.NetworkConfiguration != nil && b.ko.Spec.NetworkConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.NetworkConfiguration.NetworkMode, b.ko.Spec.NetworkConfiguration.NetworkMode) {
			delta.Add("Spec.NetworkConfiguration.NetworkMode", a.ko.Spec.NetworkConfiguration.NetworkMode, b.ko.Spec.NetworkConfiguration.NetworkMode)
		} else if a.ko.Spec.NetworkConfiguration.NetworkMode != nil && b.ko.Spec.NetworkConfiguration.NetworkMode != nil {
			if *a.ko.Spec.NetworkConfiguration.NetworkMode != *b.ko.Spec.NetworkConfiguration.NetworkMode {
				delta.Add("Spec.NetworkConfiguration.NetworkMode", a.ko.Spec.NetworkConfiguration.NetworkMode, b.ko.Spec.NetworkConfiguration.NetworkMode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.NetworkConfiguration.NetworkModeConfig, b.ko.Spec.NetworkConfiguration.NetworkModeConfig) {
			delta.Add("Spec.NetworkConfiguration.NetworkModeConfig", a.ko.Spec.NetworkConfiguration.NetworkModeConfig, b.ko.Spec.NetworkConfiguration.NetworkModeConfig)
		} else if a.ko.Spec.NetworkConfiguration.NetworkModeConfig != nil && b.ko.Spec.NetworkConfiguration.NetworkModeConfig != nil {
			if len(a.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups) != len(b.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups) {
				delta.Add("Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups", a.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups, b.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups)
			} else if len(a.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups, b.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups) {
					delta.Add("Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups", a.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups, b.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups)
				}
			}
			if len(a.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets) != len(b.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets) {
				delta.Add("Spec.NetworkConfiguration.NetworkModeConfig.Subnets", a.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets, b.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets)
			} else if len(a.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets) > 0 {
				if !ackcompare.SliceStringPEqual(a.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets, b.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets) {
					delta.Add("Spec.NetworkConfiguration.NetworkModeConfig.Subnets", a.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets, b.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets)
				}
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ProtocolConfiguration, b.ko.Spec.ProtocolConfiguration) {
		delta.Add("Spec.ProtocolConfiguration", a.ko.Spec.ProtocolConfiguration, b.ko.Spec.ProtocolConfiguration)
	} else if a.ko.Spec.ProtocolConfiguration != nil && b.ko.Spec.ProtocolConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.ProtocolConfiguration.ServerProtocol, b.ko.Spec.ProtocolConfiguration.ServerProtocol) {
			delta.Add("Spec.ProtocolConfiguration.ServerProtocol", a.ko.Spec.ProtocolConfiguration.ServerProtocol, b.ko.Spec.ProtocolConfiguration.ServerProtocol)
		} else if a.ko.Spec.ProtocolConfiguration.ServerProtocol != nil && b.ko.Spec.ProtocolConfiguration.ServerProtocol != nil {
			if *a.ko.Spec.ProtocolConfiguration.ServerProtocol != *b.ko.Spec.ProtocolConfiguration.ServerProtocol {
				delta.Add("Spec.ProtocolConfiguration.ServerProtocol", a.ko.Spec.ProtocolConfiguration.ServerProtocol, b.ko.Spec.ProtocolConfiguration.ServerProtocol)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RequestHeaderConfiguration, b.ko.Spec.RequestHeaderConfiguration) {
		delta.Add("Spec.RequestHeaderConfiguration", a.ko.Spec.RequestHeaderConfiguration, b.ko.Spec.RequestHeaderConfiguration)
	} else if a.ko.Spec.RequestHeaderConfiguration != nil && b.ko.Spec.RequestHeaderConfiguration != nil {
		if len(a.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist) != len(b.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist) {
			delta.Add("Spec.RequestHeaderConfiguration.RequestHeaderAllowlist", a.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist, b.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist)
		} else if len(a.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist) > 0 {
			if !ackcompare.SliceStringPEqual(a.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist, b.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist) {
				delta.Add("Spec.RequestHeaderConfiguration.RequestHeaderAllowlist", a.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist, b.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RoleARN, b.ko.Spec.RoleARN) {
		delta.Add("Spec.RoleARN", a.ko.Spec.RoleARN, b.ko.Spec.RoleARN)
	} else if a.ko.Spec.RoleARN != nil && b.ko.Spec.RoleARN != nil {
		if *a.ko.Spec.RoleARN != *b.ko.Spec.RoleARN {
			delta.Add("Spec.RoleARN", a.ko.Spec.RoleARN, b.ko.Spec.RoleARN)
		}
	}
	desiredACKTags, _ := convertToOrderedACKTags(a.ko.Spec.Tags)
	latestACKTags, _ := convertToOrderedACKTags(b.ko.Spec.Tags)
	if !ackcompare.MapStringStringEqual(desiredACKTags, latestACKTags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
