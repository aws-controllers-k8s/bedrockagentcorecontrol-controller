// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package agent_runtime

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/bedrockagentcorecontrol"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/bedrockagentcorecontrol/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/bedrockagentcorecontrol-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.AgentRuntime{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetAgentRuntimeOutput
	resp, err = rm.sdkapi.GetAgentRuntime(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetAgentRuntime", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.AgentRuntimeArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.AgentRuntimeArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.AgentRuntimeArtifact != nil {
		f1 := &svcapitypes.AgentRuntimeArtifact{}
		switch resp.AgentRuntimeArtifact.(type) {
		case *svcsdktypes.AgentRuntimeArtifactMemberContainerConfiguration:
			f1f0 := resp.AgentRuntimeArtifact.(*svcsdktypes.AgentRuntimeArtifactMemberContainerConfiguration)
			if f1f0 != nil {
				f1f0f0 := &svcapitypes.ContainerConfiguration{}
				if f1f0.Value.ContainerUri != nil {
					f1f0f0.ContainerURI = f1f0.Value.ContainerUri
				}
				f1.ContainerConfiguration = f1f0f0
			}
		}
		ko.Spec.AgentRuntimeArtifact = f1
	} else {
		ko.Spec.AgentRuntimeArtifact = nil
	}
	if resp.AgentRuntimeId != nil {
		ko.Status.AgentRuntimeID = resp.AgentRuntimeId
	} else {
		ko.Status.AgentRuntimeID = nil
	}
	if resp.AgentRuntimeName != nil {
		ko.Spec.AgentRuntimeName = resp.AgentRuntimeName
	} else {
		ko.Spec.AgentRuntimeName = nil
	}
	if resp.AgentRuntimeVersion != nil {
		ko.Status.AgentRuntimeVersion = resp.AgentRuntimeVersion
	} else {
		ko.Status.AgentRuntimeVersion = nil
	}
	if resp.AuthorizerConfiguration != nil {
		f5 := &svcapitypes.AuthorizerConfiguration{}
		switch resp.AuthorizerConfiguration.(type) {
		case *svcsdktypes.AuthorizerConfigurationMemberCustomJWTAuthorizer:
			f5f0 := resp.AuthorizerConfiguration.(*svcsdktypes.AuthorizerConfigurationMemberCustomJWTAuthorizer)
			if f5f0 != nil {
				f5f0f0 := &svcapitypes.CustomJWTAuthorizerConfiguration{}
				if f5f0.Value.AllowedAudience != nil {
					f5f0f0.AllowedAudience = aws.StringSlice(f5f0.Value.AllowedAudience)
				}
				if f5f0.Value.AllowedClients != nil {
					f5f0f0.AllowedClients = aws.StringSlice(f5f0.Value.AllowedClients)
				}
				if f5f0.Value.DiscoveryUrl != nil {
					f5f0f0.DiscoveryURL = f5f0.Value.DiscoveryUrl
				}
				f5.CustomJWTAuthorizer = f5f0f0
			}
		}
		ko.Spec.AuthorizerConfiguration = f5
	} else {
		ko.Spec.AuthorizerConfiguration = nil
	}
	if resp.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.EnvironmentVariables != nil {
		ko.Spec.EnvironmentVariables = aws.StringMap(resp.EnvironmentVariables)
	} else {
		ko.Spec.EnvironmentVariables = nil
	}
	if resp.NetworkConfiguration != nil {
		f10 := &svcapitypes.NetworkConfiguration{}
		if resp.NetworkConfiguration.NetworkMode != "" {
			f10.NetworkMode = aws.String(string(resp.NetworkConfiguration.NetworkMode))
		}
		if resp.NetworkConfiguration.NetworkModeConfig != nil {
			f10f1 := &svcapitypes.VPCConfig{}
			if resp.NetworkConfiguration.NetworkModeConfig.SecurityGroups != nil {
				f10f1.SecurityGroups = aws.StringSlice(resp.NetworkConfiguration.NetworkModeConfig.SecurityGroups)
			}
			if resp.NetworkConfiguration.NetworkModeConfig.Subnets != nil {
				f10f1.Subnets = aws.StringSlice(resp.NetworkConfiguration.NetworkModeConfig.Subnets)
			}
			f10.NetworkModeConfig = f10f1
		}
		ko.Spec.NetworkConfiguration = f10
	} else {
		ko.Spec.NetworkConfiguration = nil
	}
	if resp.ProtocolConfiguration != nil {
		f11 := &svcapitypes.ProtocolConfiguration{}
		if resp.ProtocolConfiguration.ServerProtocol != "" {
			f11.ServerProtocol = aws.String(string(resp.ProtocolConfiguration.ServerProtocol))
		}
		ko.Spec.ProtocolConfiguration = f11
	} else {
		ko.Spec.ProtocolConfiguration = nil
	}
	if resp.RequestHeaderConfiguration != nil {
		f12 := &svcapitypes.RequestHeaderConfiguration{}
		switch resp.RequestHeaderConfiguration.(type) {
		case *svcsdktypes.RequestHeaderConfigurationMemberRequestHeaderAllowlist:
			f12f0 := resp.RequestHeaderConfiguration.(*svcsdktypes.RequestHeaderConfigurationMemberRequestHeaderAllowlist)
			if f12f0 != nil {
				f12.RequestHeaderAllowlist = aws.StringSlice(f12f0.Value)
			}
		}
		ko.Spec.RequestHeaderConfiguration = f12
	} else {
		ko.Spec.RequestHeaderConfiguration = nil
	}
	if resp.RoleArn != nil {
		ko.Spec.RoleARN = resp.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.Status != "" {
		ko.Status.Status = aws.String(string(resp.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.WorkloadIdentityDetails != nil {
		f15 := &svcapitypes.WorkloadIdentityDetails{}
		if resp.WorkloadIdentityDetails.WorkloadIdentityArn != nil {
			f15.WorkloadIdentityARN = resp.WorkloadIdentityDetails.WorkloadIdentityArn
		}
		ko.Status.WorkloadIdentityDetails = f15
	} else {
		ko.Status.WorkloadIdentityDetails = nil
	}

	rm.setStatusDefaults(ko)
	if !agentRuntimeReady(&resource{ko}) {
		return nil, requeueNotReady
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Status.AgentRuntimeID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetAgentRuntimeInput, error) {
	res := &svcsdk.GetAgentRuntimeInput{}

	if r.ko.Status.AgentRuntimeID != nil {
		res.AgentRuntimeId = r.ko.Status.AgentRuntimeID
	}
	if r.ko.Status.AgentRuntimeVersion != nil {
		res.AgentRuntimeVersion = r.ko.Status.AgentRuntimeVersion
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateAgentRuntimeOutput
	_ = resp
	resp, err = rm.sdkapi.CreateAgentRuntime(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateAgentRuntime", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.AgentRuntimeArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.AgentRuntimeArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.AgentRuntimeId != nil {
		ko.Status.AgentRuntimeID = resp.AgentRuntimeId
	} else {
		ko.Status.AgentRuntimeID = nil
	}
	if resp.AgentRuntimeVersion != nil {
		ko.Status.AgentRuntimeVersion = resp.AgentRuntimeVersion
	} else {
		ko.Status.AgentRuntimeVersion = nil
	}
	if resp.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Status != "" {
		ko.Status.Status = aws.String(string(resp.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.WorkloadIdentityDetails != nil {
		f5 := &svcapitypes.WorkloadIdentityDetails{}
		if resp.WorkloadIdentityDetails.WorkloadIdentityArn != nil {
			f5.WorkloadIdentityARN = resp.WorkloadIdentityDetails.WorkloadIdentityArn
		}
		ko.Status.WorkloadIdentityDetails = f5
	} else {
		ko.Status.WorkloadIdentityDetails = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateAgentRuntimeInput, error) {
	res := &svcsdk.CreateAgentRuntimeInput{}

	if r.ko.Spec.AgentRuntimeArtifact != nil {
		var f0 svcsdktypes.AgentRuntimeArtifact
		isInterfaceSet := false
		if r.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration != nil {
			if isInterfaceSet {
				return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for ContainerConfiguration"))
			}
			f0f0Parent := &svcsdktypes.AgentRuntimeArtifactMemberContainerConfiguration{}
			f0f0 := &svcsdktypes.ContainerConfiguration{}
			if r.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI != nil {
				f0f0.ContainerUri = r.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI
			}
			f0f0Parent.Value = *f0f0
			f0 = f0f0Parent
			isInterfaceSet = true
		}
		res.AgentRuntimeArtifact = f0
	}
	if r.ko.Spec.AgentRuntimeName != nil {
		res.AgentRuntimeName = r.ko.Spec.AgentRuntimeName
	}
	if r.ko.Spec.AuthorizerConfiguration != nil {
		var f2 svcsdktypes.AuthorizerConfiguration
		isInterfaceSet := false
		if r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer != nil {
			if isInterfaceSet {
				return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for CustomJWTAuthorizer"))
			}
			f2f0Parent := &svcsdktypes.AuthorizerConfigurationMemberCustomJWTAuthorizer{}
			f2f0 := &svcsdktypes.CustomJWTAuthorizerConfiguration{}
			if r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience != nil {
				f2f0.AllowedAudience = aws.ToStringSlice(r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience)
			}
			if r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients != nil {
				f2f0.AllowedClients = aws.ToStringSlice(r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients)
			}
			if r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL != nil {
				f2f0.DiscoveryUrl = r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL
			}
			f2f0Parent.Value = *f2f0
			f2 = f2f0Parent
			isInterfaceSet = true
		}
		res.AuthorizerConfiguration = f2
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.EnvironmentVariables != nil {
		res.EnvironmentVariables = aws.ToStringMap(r.ko.Spec.EnvironmentVariables)
	}
	if r.ko.Spec.NetworkConfiguration != nil {
		f5 := &svcsdktypes.NetworkConfiguration{}
		if r.ko.Spec.NetworkConfiguration.NetworkMode != nil {
			f5.NetworkMode = svcsdktypes.NetworkMode(*r.ko.Spec.NetworkConfiguration.NetworkMode)
		}
		if r.ko.Spec.NetworkConfiguration.NetworkModeConfig != nil {
			f5f1 := &svcsdktypes.VpcConfig{}
			if r.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups != nil {
				f5f1.SecurityGroups = aws.ToStringSlice(r.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups)
			}
			if r.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets != nil {
				f5f1.Subnets = aws.ToStringSlice(r.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets)
			}
			f5.NetworkModeConfig = f5f1
		}
		res.NetworkConfiguration = f5
	}
	if r.ko.Spec.ProtocolConfiguration != nil {
		f6 := &svcsdktypes.ProtocolConfiguration{}
		if r.ko.Spec.ProtocolConfiguration.ServerProtocol != nil {
			f6.ServerProtocol = svcsdktypes.ServerProtocol(*r.ko.Spec.ProtocolConfiguration.ServerProtocol)
		}
		res.ProtocolConfiguration = f6
	}
	if r.ko.Spec.RequestHeaderConfiguration != nil {
		var f7 svcsdktypes.RequestHeaderConfiguration
		isInterfaceSet := false
		if r.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist != nil {
			if isInterfaceSet {
				return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for RequestHeaderAllowlist"))
			}
			f7f0Parent := &svcsdktypes.RequestHeaderConfigurationMemberRequestHeaderAllowlist{}
			f7f0 := []string{}
			f7f0 = aws.ToStringSlice(r.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist)
			f7f0Parent.Value = f7f0
			f7 = f7f0Parent
			isInterfaceSet = true
		}
		res.RequestHeaderConfiguration = f7
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}
	if r.ko.Spec.Tags != nil {
		res.Tags = aws.ToStringMap(r.ko.Spec.Tags)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		err := syncTags(
			ctx, rm.sdkapi, rm.metrics,
			string(*latest.ko.Status.ACKResourceMetadata.ARN),
			aws.ToStringMap(desired.ko.Spec.Tags), aws.ToStringMap(latest.ko.Spec.Tags),
		)
		if err != nil {
			return nil, err
		}
	}
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}
	if !agentRuntimeReady(latest) {
		return latest, requeueNotReady
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateAgentRuntimeOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateAgentRuntime(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateAgentRuntime", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.AgentRuntimeArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.AgentRuntimeArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.AgentRuntimeId != nil {
		ko.Status.AgentRuntimeID = resp.AgentRuntimeId
	} else {
		ko.Status.AgentRuntimeID = nil
	}
	if resp.AgentRuntimeVersion != nil {
		ko.Status.AgentRuntimeVersion = resp.AgentRuntimeVersion
	} else {
		ko.Status.AgentRuntimeVersion = nil
	}
	if resp.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Status != "" {
		ko.Status.Status = aws.String(string(resp.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.WorkloadIdentityDetails != nil {
		f6 := &svcapitypes.WorkloadIdentityDetails{}
		if resp.WorkloadIdentityDetails.WorkloadIdentityArn != nil {
			f6.WorkloadIdentityARN = resp.WorkloadIdentityDetails.WorkloadIdentityArn
		}
		ko.Status.WorkloadIdentityDetails = f6
	} else {
		ko.Status.WorkloadIdentityDetails = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateAgentRuntimeInput, error) {
	res := &svcsdk.UpdateAgentRuntimeInput{}

	if r.ko.Spec.AgentRuntimeArtifact != nil {
		var f0 svcsdktypes.AgentRuntimeArtifact
		isInterfaceSet := false
		if r.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration != nil {
			if isInterfaceSet {
				return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for ContainerConfiguration"))
			}
			f0f0Parent := &svcsdktypes.AgentRuntimeArtifactMemberContainerConfiguration{}
			f0f0 := &svcsdktypes.ContainerConfiguration{}
			if r.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI != nil {
				f0f0.ContainerUri = r.ko.Spec.AgentRuntimeArtifact.ContainerConfiguration.ContainerURI
			}
			f0f0Parent.Value = *f0f0
			f0 = f0f0Parent
			isInterfaceSet = true
		}
		res.AgentRuntimeArtifact = f0
	}
	if r.ko.Status.AgentRuntimeID != nil {
		res.AgentRuntimeId = r.ko.Status.AgentRuntimeID
	}
	if r.ko.Spec.AuthorizerConfiguration != nil {
		var f2 svcsdktypes.AuthorizerConfiguration
		isInterfaceSet := false
		if r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer != nil {
			if isInterfaceSet {
				return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for CustomJWTAuthorizer"))
			}
			f2f0Parent := &svcsdktypes.AuthorizerConfigurationMemberCustomJWTAuthorizer{}
			f2f0 := &svcsdktypes.CustomJWTAuthorizerConfiguration{}
			if r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience != nil {
				f2f0.AllowedAudience = aws.ToStringSlice(r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedAudience)
			}
			if r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients != nil {
				f2f0.AllowedClients = aws.ToStringSlice(r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.AllowedClients)
			}
			if r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL != nil {
				f2f0.DiscoveryUrl = r.ko.Spec.AuthorizerConfiguration.CustomJWTAuthorizer.DiscoveryURL
			}
			f2f0Parent.Value = *f2f0
			f2 = f2f0Parent
			isInterfaceSet = true
		}
		res.AuthorizerConfiguration = f2
	}
	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.EnvironmentVariables != nil {
		res.EnvironmentVariables = aws.ToStringMap(r.ko.Spec.EnvironmentVariables)
	}
	if r.ko.Spec.NetworkConfiguration != nil {
		f6 := &svcsdktypes.NetworkConfiguration{}
		if r.ko.Spec.NetworkConfiguration.NetworkMode != nil {
			f6.NetworkMode = svcsdktypes.NetworkMode(*r.ko.Spec.NetworkConfiguration.NetworkMode)
		}
		if r.ko.Spec.NetworkConfiguration.NetworkModeConfig != nil {
			f6f1 := &svcsdktypes.VpcConfig{}
			if r.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups != nil {
				f6f1.SecurityGroups = aws.ToStringSlice(r.ko.Spec.NetworkConfiguration.NetworkModeConfig.SecurityGroups)
			}
			if r.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets != nil {
				f6f1.Subnets = aws.ToStringSlice(r.ko.Spec.NetworkConfiguration.NetworkModeConfig.Subnets)
			}
			f6.NetworkModeConfig = f6f1
		}
		res.NetworkConfiguration = f6
	}
	if r.ko.Spec.ProtocolConfiguration != nil {
		f7 := &svcsdktypes.ProtocolConfiguration{}
		if r.ko.Spec.ProtocolConfiguration.ServerProtocol != nil {
			f7.ServerProtocol = svcsdktypes.ServerProtocol(*r.ko.Spec.ProtocolConfiguration.ServerProtocol)
		}
		res.ProtocolConfiguration = f7
	}
	if r.ko.Spec.RequestHeaderConfiguration != nil {
		var f8 svcsdktypes.RequestHeaderConfiguration
		isInterfaceSet := false
		if r.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist != nil {
			if isInterfaceSet {
				return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for RequestHeaderAllowlist"))
			}
			f8f0Parent := &svcsdktypes.RequestHeaderConfigurationMemberRequestHeaderAllowlist{}
			f8f0 := []string{}
			f8f0 = aws.ToStringSlice(r.ko.Spec.RequestHeaderConfiguration.RequestHeaderAllowlist)
			f8f0Parent.Value = f8f0
			f8 = f8f0Parent
			isInterfaceSet = true
		}
		res.RequestHeaderConfiguration = f8
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteAgentRuntimeOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteAgentRuntime(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteAgentRuntime", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteAgentRuntimeInput, error) {
	res := &svcsdk.DeleteAgentRuntimeInput{}

	if r.ko.Status.AgentRuntimeID != nil {
		res.AgentRuntimeId = r.ko.Status.AgentRuntimeID
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.AgentRuntime,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "ValidationException":
		return true
	default:
		return false
	}
}
