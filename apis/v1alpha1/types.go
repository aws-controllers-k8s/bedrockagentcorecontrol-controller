// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	"github.com/aws/aws-sdk-go/aws"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = &aws.JSONValue{}
	_ = ackv1alpha1.AWSAccountID("")
)

// The artifact of the agent.
type AgentRuntimeArtifact struct {
	// Representation of a container configuration.
	ContainerConfiguration *ContainerConfiguration `json:"containerConfiguration,omitempty"`
}

// Contains information about an agent runtime endpoint. An endpoint provides
// a way to connect to and interact with an agent runtime.
type AgentRuntimeEndpoint_SDK struct {
	AgentRuntimeARN         *string      `json:"agentRuntimeARN,omitempty"`
	AgentRuntimeEndpointARN *string      `json:"agentRuntimeEndpointARN,omitempty"`
	CreatedAt               *metav1.Time `json:"createdAt,omitempty"`
	Description             *string      `json:"description,omitempty"`
	ID                      *string      `json:"id,omitempty"`
	LastUpdatedAt           *metav1.Time `json:"lastUpdatedAt,omitempty"`
	LiveVersion             *string      `json:"liveVersion,omitempty"`
	Name                    *string      `json:"name,omitempty"`
	Status                  *string      `json:"status,omitempty"`
	TargetVersion           *string      `json:"targetVersion,omitempty"`
}

// Contains information about an agent runtime. An agent runtime is the execution
// environment for a Amazon Bedrock Agent.
type AgentRuntime_SDK struct {
	AgentRuntimeARN     *string      `json:"agentRuntimeARN,omitempty"`
	AgentRuntimeID      *string      `json:"agentRuntimeID,omitempty"`
	AgentRuntimeName    *string      `json:"agentRuntimeName,omitempty"`
	AgentRuntimeVersion *string      `json:"agentRuntimeVersion,omitempty"`
	Description         *string      `json:"description,omitempty"`
	LastUpdatedAt       *metav1.Time `json:"lastUpdatedAt,omitempty"`
	Status              *string      `json:"status,omitempty"`
}

// Represents inbound authorization configuration options used to authenticate
// incoming requests.
type AuthorizerConfiguration struct {
	// Configuration for inbound JWT-based authorization, specifying how incoming
	// requests should be authenticated.
	CustomJWTAuthorizer *CustomJWTAuthorizerConfiguration `json:"customJWTAuthorizer,omitempty"`
}

// The network configuration for a browser. This structure defines how the browser
// connects to the network.
type BrowserNetworkConfiguration struct {
	// VpcConfig for the Agent.
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// Contains summary information about a browser. A browser enables Amazon Bedrock
// Agent to interact with web content.
type BrowserSummary struct {
	CreatedAt     *metav1.Time `json:"createdAt,omitempty"`
	Description   *string      `json:"description,omitempty"`
	LastUpdatedAt *metav1.Time `json:"lastUpdatedAt,omitempty"`
}

// The network configuration for a code interpreter. This structure defines
// how the code interpreter connects to the network.
type CodeInterpreterNetworkConfiguration struct {
	// VpcConfig for the Agent.
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// Contains summary information about a code interpreter. A code interpreter
// enables Amazon Bedrock Agent to execute code.
type CodeInterpreterSummary struct {
	CreatedAt     *metav1.Time `json:"createdAt,omitempty"`
	Description   *string      `json:"description,omitempty"`
	LastUpdatedAt *metav1.Time `json:"lastUpdatedAt,omitempty"`
}

// Representation of a container configuration.
type ContainerConfiguration struct {
	ContainerURI *string `json:"containerURI,omitempty"`
}

// Configuration for inbound JWT-based authorization, specifying how incoming
// requests should be authenticated.
type CustomJWTAuthorizerConfiguration struct {
	AllowedAudience []*string `json:"allowedAudience,omitempty"`
	AllowedClients  []*string `json:"allowedClients,omitempty"`
	DiscoveryURL    *string   `json:"discoveryURL,omitempty"`
}

// Input for creating a custom memory strategy.
type CustomMemoryStrategyInput struct {
	Description *string `json:"description,omitempty"`
}

// Input for deleting a memory strategy.
type DeleteMemoryStrategyInput struct {
	MemoryStrategyID *string `json:"memoryStrategyID,omitempty"`
}

// Contains summary information about a gateway.
type GatewaySummary struct {
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	UpdatedAt *metav1.Time `json:"updatedAt,omitempty"`
}

// Contains information about a memory resource.
type Memory struct {
	Description   *string `json:"description,omitempty"`
	FailureReason *string `json:"failureReason,omitempty"`
}

// Contains information about a memory strategy.
type MemoryStrategy struct {
	Description *string `json:"description,omitempty"`
}

// Input for modifying a memory strategy.
type ModifyMemoryStrategyInput struct {
	Description      *string `json:"description,omitempty"`
	MemoryStrategyID *string `json:"memoryStrategyID,omitempty"`
}

// SecurityConfig for the Agent.
type NetworkConfiguration struct {
	NetworkMode *string `json:"networkMode,omitempty"`
	// VpcConfig for the Agent.
	NetworkModeConfig *VPCConfig `json:"networkModeConfig,omitempty"`
}

// The protocol configuration for an agent runtime. This structure defines how
// the agent runtime communicates with clients.
type ProtocolConfiguration struct {
	ServerProtocol *string `json:"serverProtocol,omitempty"`
}

// Configuration for HTTP request headers that will be passed through to the
// runtime.
type RequestHeaderConfiguration struct {
	RequestHeaderAllowlist []*string `json:"requestHeaderAllowlist,omitempty"`
}

// The Amazon S3 location for storing data. This structure defines where in
// Amazon S3 data is stored.
type S3Location struct {
	Bucket *string `json:"bucket,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
}

// A schema definition for a gateway target. This structure defines the structure
// of the API that the target exposes.
type SchemaDefinition struct {
	Description *string `json:"description,omitempty"`
}

// Contains semantic consolidation override configuration.
type SemanticConsolidationOverride struct {
	ModelID *string `json:"modelID,omitempty"`
}

// Contains semantic extraction override configuration.
type SemanticExtractionOverride struct {
	ModelID *string `json:"modelID,omitempty"`
}

// Input for creating a semantic memory strategy.
type SemanticMemoryStrategyInput struct {
	Description *string `json:"description,omitempty"`
}

// Input for semantic override consolidation configuration in a memory strategy.
type SemanticOverrideConsolidationConfigurationInput struct {
	ModelID *string `json:"modelID,omitempty"`
}

// Input for semantic override extraction configuration in a memory strategy.
type SemanticOverrideExtractionConfigurationInput struct {
	ModelID *string `json:"modelID,omitempty"`
}

// Contains summary consolidation override configuration.
type SummaryConsolidationOverride struct {
	ModelID *string `json:"modelID,omitempty"`
}

// Input for creating a summary memory strategy.
type SummaryMemoryStrategyInput struct {
	Description *string `json:"description,omitempty"`
}

// Input for summary override consolidation configuration in a memory strategy.
type SummaryOverrideConsolidationConfigurationInput struct {
	ModelID *string `json:"modelID,omitempty"`
}

// Contains summary information about a gateway target. A target represents
// an endpoint that the gateway can connect to.
type TargetSummary struct {
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	UpdatedAt *metav1.Time `json:"updatedAt,omitempty"`
}

// A tool definition for a gateway target. This structure defines a tool that
// the target exposes through the Model Context Protocol.
type ToolDefinition struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// Contains user preference consolidation override configuration.
type UserPreferenceConsolidationOverride struct {
	ModelID *string `json:"modelID,omitempty"`
}

// Contains user preference extraction override configuration.
type UserPreferenceExtractionOverride struct {
	ModelID *string `json:"modelID,omitempty"`
}

// Input for creating a user preference memory strategy.
type UserPreferenceMemoryStrategyInput struct {
	Description *string `json:"description,omitempty"`
}

// Input for user preference override consolidation configuration in a memory
// strategy.
type UserPreferenceOverrideConsolidationConfigurationInput struct {
	ModelID *string `json:"modelID,omitempty"`
}

// Input for user preference override extraction configuration in a memory strategy.
type UserPreferenceOverrideExtractionConfigurationInput struct {
	ModelID *string `json:"modelID,omitempty"`
}

// VpcConfig for the Agent.
type VPCConfig struct {
	SecurityGroups []*string `json:"securityGroups,omitempty"`
	Subnets        []*string `json:"subnets,omitempty"`
}

// Stores information about a field passed inside a request that resulted in
// an exception.
type ValidationExceptionField struct {
	Message *string `json:"message,omitempty"`
	Name    *string `json:"name,omitempty"`
}

// The information about the workload identity.
type WorkloadIdentityDetails struct {
	WorkloadIdentityARN *string `json:"workloadIdentityARN,omitempty"`
}
